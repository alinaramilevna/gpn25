"use client";

import { useState } from "react";
import dynamic from "next/dynamic";
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from "chart.js";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è Chart.js
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º SSR
const Line = dynamic(() => import("react-chartjs-2").then((mod) => mod.Line), {
  ssr: false,
});

export default function EnergyCalculator() {
  const [initialConsumption, setInitialConsumption] = useState(10000);
  const [years, setYears] = useState(10);
  const [rateIncrease, setRateIncrease] = useState(15);
  const [efficiency, setEfficiency] = useState(0.05);
  const [energyPrice, setEnergyPrice] = useState(3);

  const data = Array.from({ length: years }, (_, t) => ({
    year: t + 1,
    consumption: initialConsumption * Math.pow(1 - efficiency, t),
  }));

  const calculateSavings = () => {
    let totalSavings = 0;
    for (let t = 1; t < years; t++) {
      totalSavings +=
        initialConsumption * Math.pow(1 - efficiency, t - 1) -
        initialConsumption * Math.pow(1 - efficiency, t);
    }
    return totalSavings.toFixed(2);
  };

  const calculateMonetarySavings = () => {
    let totalMonetarySavings = 0;
    let currentTariff = energyPrice;

    for (let t = 1; t < years; t++) {
      const yearlySavings =
        (initialConsumption * Math.pow(1 - efficiency, t - 1) -
          initialConsumption * Math.pow(1 - efficiency, t)) *
        currentTariff;
      totalMonetarySavings += yearlySavings;
      currentTariff *= 1 + rateIncrease / 100;
    }
    return totalMonetarySavings.toFixed(2);
  };

  const chartData = {
    labels: data.map((d) => `–ì–æ–¥ ${d.year}`),
    datasets: [
      {
        label: "–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–ú–î–∂)",
        data: data.map((d) => d.consumption),
        borderColor: "#ff3b30",
        backgroundColor: "rgba(255, 59, 48, 0.2)",
        tension: 0.3,
      },
    ],
  };

  return (
    <div className="min-h-screen bg-white text-black flex flex-col items-center p-6">
      <h1 className="text-2xl font-semibold mb-4">üîã –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è</h1>

      <div className="grid grid-cols-2 gap-4 w-full max-w-xl">
        <Card>
          <CardContent className="flex flex-col gap-2">
            <label>–ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ (–ú–î–∂)</label>
            <Input
              type="number"
              value={initialConsumption}
              onChange={(e) => setInitialConsumption(Number(e.target.value))}
            />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex flex-col gap-2">
            <label>–í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–µ—Ç)</label>
            <Input
              type="number"
              value={years}
              onChange={(e) => setYears(Number(e.target.value))}
            />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex flex-col gap-2">
            <label>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è (%)</label>
            <Input
              type="number"
              value={efficiency * 100}
              onChange={(e) => setEfficiency(Number(e.target.value) / 100)}
            />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex flex-col gap-2">
            <label>–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –µ–∂–µ–≥–æ–¥–Ω–æ (%)</label>
            <Input
              type="number"
              value={rateIncrease}
              onChange={(e) => setRateIncrease(Number(e.target.value))}
            />
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex flex-col gap-2">
            <label>–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –≤ –ø–µ—Ä–≤—ã–π –≥–æ–¥ (—Ä—É–±/–∫–í—Ç*—á)</label>
            <Input
              type="number"
              value={energyPrice}
              onChange={(e) => setEnergyPrice(Number(e.target.value))}
            />
          </CardContent>
        </Card>
      </div>

      <div className="w-full max-w-2xl mt-6">
        {Line && <Line data={chartData} />}
      </div>

      <div className="mt-6">
        <h2 className="text-xl font-semibold">–°–æ–≤–æ–∫—É–ø–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –≤ –ú–î–∂</h2>
        <p className="text-lg">–°—É–º–º–∞—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –∑–∞ {years} –ª–µ—Ç: {calculateSavings()} –ú–î–∂</p>
      </div>

      <div className="mt-6">
        <h2 className="text-xl font-semibold">–°–æ–≤–æ–∫—É–ø–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –≤ –¥–µ–Ω—å–≥–∞—Ö</h2>
        <p className="text-lg">–°—É–º–º–∞—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –∑–∞ {years} –ª–µ—Ç: {calculateMonetarySavings()} —Ä—É–±</p>
      </div>

      <Button className="mt-6 bg-black text-white px-4 py-2 rounded-lg shadow-md">
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—é
      </Button>
    </div>
  );
}
